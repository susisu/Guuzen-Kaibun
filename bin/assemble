#!/usr/bin/env node

/*
 * copyright (c) 2015 Susisu
 */

"use strict";

var fs = require("fs");
var palindrome = require("palindrome");
var packageInfo = require("../package.json");

var program = require("commander");

program.version(packageInfo.version, "-v, --version");

program
    .arguments("<dir> <outfile>")
    .action(function (dirname, outfilename) {
        fs.readdir(dirname, function (err, files) {
            if (err) {
                process.stderr.write(err.toString() + "\n");
                process.exit(1);
                return;
            }
            var list = [];
            // 重複数
            var duplNum = Object.create(null);
            // ディレクトリ内のファイルを読み込む
            for (var i = 0; i < files.length; i++) {
                var content = fs.readFileSync(dirname + "/" + files[i], { "encoding": "utf8" });
                var lines   = content.split("\n");
                for (var j = 0; j < lines.length; j++) {
                    if (lines[j] === "") {
                        continue;
                    }
                    var info = lines[j].split("\t");
                    // 重複していたら除く
                    if (duplNum[info[0]]) {
                        duplNum[info[0]]++;
                        continue;
                    }
                    else {
                        duplNum[info[0]] = 1;
                    }
                    // 音数を数値に変換
                    info[2] = parseInt(info[2]);
                    list.push(info);
                }
            }
            // 音数で降順にソート
            list.sort(function (x, y) {
                return y[2] - x[2];
            });
            
            var counts = [];
            var output = "";
            for (i = 0; i < list.length; i++) {
                // 文と読みのエントロピーを計算, u は調和平均
                var s = entropy(list[i][0]),
                    t = entropy(list[i][1]),
                    u = s + t === 0 ? 0 : 2 * s * t / (s + t);
                // u が閾値未満ならば無視する (要調整?)
                if (u < 0.835) {
                    continue;
                }
                if (counts[list[i][2]] === undefined) {
                    counts[list[i][2]] = duplNum[list[i][0]];
                }
                else {
                    counts[list[i][2]] += duplNum[list[i][0]];
                }
                // 回文、音数、ページ名、ファイル名
                output +=
                    list[i][0] + "\t" +
                    list[i][1] + "\t" +
                    list[i][2].toString() + "\t" +
                    list[i][3] + "\t" +
                    list[i][4] + "\n";
            }
            var total = 0;
            for (i = 0; i < counts.length; i++) {
                if (!counts[i]) {
                    counts[i] = 0;
                }
                total += counts[i];
                process.stdout.write(i.toString() + "\t" + counts[i].toString() + "\n");
            }
            process.stdout.write("\n# total\t" + total.toString() + "\n");
            fs.writeFileSync(outfilename, output);
        })
    });

program.parse(process.argv);

if (program.args.length === 0) {
    program.help();
}

// 文字の入れ替えを元に、文字辺りのエントロピーを計算
function entropy(sentence) {
    var map = Object.create(null);
    var numChars = sentence.length;
    var i;
    for (i = 0; i < numChars; i++) {
        if (map[sentence.charAt(i)]) {
            map[sentence.charAt(i)]++;
        }
        else {
            map[sentence.charAt(i)] = 1;
        }
    }
    var n = numChars;
    var s = 0;
    for (var key in map) {
        var c = map[key];
        for (i = 1; i <= n - c; i++) {
            s += Math.log(c + i) - Math.log(i);
        }
        n -= c;
    }
    return s / numChars;
}
